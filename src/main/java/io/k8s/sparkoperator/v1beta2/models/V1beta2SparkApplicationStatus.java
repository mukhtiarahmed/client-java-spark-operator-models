/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.22.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.k8s.sparkoperator.v1beta2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.k8s.sparkoperator.v1beta2.models.V1beta2SparkApplicationStatusApplicationState;
import io.k8s.sparkoperator.v1beta2.models.V1beta2SparkApplicationStatusDriverInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * V1beta2SparkApplicationStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-05T08:55:35.785Z[Etc/UTC]")
public class V1beta2SparkApplicationStatus {
  public static final String SERIALIZED_NAME_APPLICATION_STATE = "applicationState";
  @SerializedName(SERIALIZED_NAME_APPLICATION_STATE)
  private V1beta2SparkApplicationStatusApplicationState applicationState;

  public static final String SERIALIZED_NAME_DRIVER_INFO = "driverInfo";
  @SerializedName(SERIALIZED_NAME_DRIVER_INFO)
  private V1beta2SparkApplicationStatusDriverInfo driverInfo;

  public static final String SERIALIZED_NAME_EXECUTION_ATTEMPTS = "executionAttempts";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ATTEMPTS)
  private Integer executionAttempts;

  public static final String SERIALIZED_NAME_EXECUTOR_STATE = "executorState";
  @SerializedName(SERIALIZED_NAME_EXECUTOR_STATE)
  private Map<String, String> executorState = null;

  public static final String SERIALIZED_NAME_LAST_SUBMISSION_ATTEMPT_TIME = "lastSubmissionAttemptTime";
  @SerializedName(SERIALIZED_NAME_LAST_SUBMISSION_ATTEMPT_TIME)
  private Object lastSubmissionAttemptTime;

  public static final String SERIALIZED_NAME_SPARK_APPLICATION_ID = "sparkApplicationId";
  @SerializedName(SERIALIZED_NAME_SPARK_APPLICATION_ID)
  private String sparkApplicationId;

  public static final String SERIALIZED_NAME_SUBMISSION_ATTEMPTS = "submissionAttempts";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_ATTEMPTS)
  private Integer submissionAttempts;

  public static final String SERIALIZED_NAME_SUBMISSION_I_D = "submissionID";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_I_D)
  private String submissionID;

  public static final String SERIALIZED_NAME_TERMINATION_TIME = "terminationTime";
  @SerializedName(SERIALIZED_NAME_TERMINATION_TIME)
  private Object terminationTime;


  public V1beta2SparkApplicationStatus applicationState(V1beta2SparkApplicationStatusApplicationState applicationState) {
    
    this.applicationState = applicationState;
    return this;
  }

   /**
   * Get applicationState
   * @return applicationState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1beta2SparkApplicationStatusApplicationState getApplicationState() {
    return applicationState;
  }


  public void setApplicationState(V1beta2SparkApplicationStatusApplicationState applicationState) {
    this.applicationState = applicationState;
  }


  public V1beta2SparkApplicationStatus driverInfo(V1beta2SparkApplicationStatusDriverInfo driverInfo) {
    
    this.driverInfo = driverInfo;
    return this;
  }

   /**
   * Get driverInfo
   * @return driverInfo
  **/
  @ApiModelProperty(required = true, value = "")

  public V1beta2SparkApplicationStatusDriverInfo getDriverInfo() {
    return driverInfo;
  }


  public void setDriverInfo(V1beta2SparkApplicationStatusDriverInfo driverInfo) {
    this.driverInfo = driverInfo;
  }


  public V1beta2SparkApplicationStatus executionAttempts(Integer executionAttempts) {
    
    this.executionAttempts = executionAttempts;
    return this;
  }

   /**
   * Get executionAttempts
   * @return executionAttempts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getExecutionAttempts() {
    return executionAttempts;
  }


  public void setExecutionAttempts(Integer executionAttempts) {
    this.executionAttempts = executionAttempts;
  }


  public V1beta2SparkApplicationStatus executorState(Map<String, String> executorState) {
    
    this.executorState = executorState;
    return this;
  }

  public V1beta2SparkApplicationStatus putExecutorStateItem(String key, String executorStateItem) {
    if (this.executorState == null) {
      this.executorState = new HashMap<>();
    }
    this.executorState.put(key, executorStateItem);
    return this;
  }

   /**
   * Get executorState
   * @return executorState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getExecutorState() {
    return executorState;
  }


  public void setExecutorState(Map<String, String> executorState) {
    this.executorState = executorState;
  }


  public V1beta2SparkApplicationStatus lastSubmissionAttemptTime(Object lastSubmissionAttemptTime) {
    
    this.lastSubmissionAttemptTime = lastSubmissionAttemptTime;
    return this;
  }

   /**
   * Get lastSubmissionAttemptTime
   * @return lastSubmissionAttemptTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getLastSubmissionAttemptTime() {
    return lastSubmissionAttemptTime;
  }


  public void setLastSubmissionAttemptTime(Object lastSubmissionAttemptTime) {
    this.lastSubmissionAttemptTime = lastSubmissionAttemptTime;
  }


  public V1beta2SparkApplicationStatus sparkApplicationId(String sparkApplicationId) {
    
    this.sparkApplicationId = sparkApplicationId;
    return this;
  }

   /**
   * Get sparkApplicationId
   * @return sparkApplicationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSparkApplicationId() {
    return sparkApplicationId;
  }


  public void setSparkApplicationId(String sparkApplicationId) {
    this.sparkApplicationId = sparkApplicationId;
  }


  public V1beta2SparkApplicationStatus submissionAttempts(Integer submissionAttempts) {
    
    this.submissionAttempts = submissionAttempts;
    return this;
  }

   /**
   * Get submissionAttempts
   * @return submissionAttempts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSubmissionAttempts() {
    return submissionAttempts;
  }


  public void setSubmissionAttempts(Integer submissionAttempts) {
    this.submissionAttempts = submissionAttempts;
  }


  public V1beta2SparkApplicationStatus submissionID(String submissionID) {
    
    this.submissionID = submissionID;
    return this;
  }

   /**
   * Get submissionID
   * @return submissionID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubmissionID() {
    return submissionID;
  }


  public void setSubmissionID(String submissionID) {
    this.submissionID = submissionID;
  }


  public V1beta2SparkApplicationStatus terminationTime(Object terminationTime) {
    
    this.terminationTime = terminationTime;
    return this;
  }

   /**
   * Get terminationTime
   * @return terminationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getTerminationTime() {
    return terminationTime;
  }


  public void setTerminationTime(Object terminationTime) {
    this.terminationTime = terminationTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1beta2SparkApplicationStatus v1beta2SparkApplicationStatus = (V1beta2SparkApplicationStatus) o;
    return Objects.equals(this.applicationState, v1beta2SparkApplicationStatus.applicationState) &&
        Objects.equals(this.driverInfo, v1beta2SparkApplicationStatus.driverInfo) &&
        Objects.equals(this.executionAttempts, v1beta2SparkApplicationStatus.executionAttempts) &&
        Objects.equals(this.executorState, v1beta2SparkApplicationStatus.executorState) &&
        Objects.equals(this.lastSubmissionAttemptTime, v1beta2SparkApplicationStatus.lastSubmissionAttemptTime) &&
        Objects.equals(this.sparkApplicationId, v1beta2SparkApplicationStatus.sparkApplicationId) &&
        Objects.equals(this.submissionAttempts, v1beta2SparkApplicationStatus.submissionAttempts) &&
        Objects.equals(this.submissionID, v1beta2SparkApplicationStatus.submissionID) &&
        Objects.equals(this.terminationTime, v1beta2SparkApplicationStatus.terminationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationState, driverInfo, executionAttempts, executorState, lastSubmissionAttemptTime, sparkApplicationId, submissionAttempts, submissionID, terminationTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1beta2SparkApplicationStatus {\n");
    sb.append("    applicationState: ").append(toIndentedString(applicationState)).append("\n");
    sb.append("    driverInfo: ").append(toIndentedString(driverInfo)).append("\n");
    sb.append("    executionAttempts: ").append(toIndentedString(executionAttempts)).append("\n");
    sb.append("    executorState: ").append(toIndentedString(executorState)).append("\n");
    sb.append("    lastSubmissionAttemptTime: ").append(toIndentedString(lastSubmissionAttemptTime)).append("\n");
    sb.append("    sparkApplicationId: ").append(toIndentedString(sparkApplicationId)).append("\n");
    sb.append("    submissionAttempts: ").append(toIndentedString(submissionAttempts)).append("\n");
    sb.append("    submissionID: ").append(toIndentedString(submissionID)).append("\n");
    sb.append("    terminationTime: ").append(toIndentedString(terminationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

