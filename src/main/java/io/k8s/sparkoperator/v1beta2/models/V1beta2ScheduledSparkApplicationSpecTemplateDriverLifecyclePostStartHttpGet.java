/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.22.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.k8s.sparkoperator.v1beta2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.k8s.sparkoperator.v1beta2.models.V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGetHttpHeaders;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-05T08:55:35.785Z[Etc/UTC]")
public class V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_HTTP_HEADERS = "httpHeaders";
  @SerializedName(SERIALIZED_NAME_HTTP_HEADERS)
  private List<V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGetHttpHeaders> httpHeaders = null;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Object port;

  public static final String SERIALIZED_NAME_SCHEME = "scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  private String scheme;


  public V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet host(String host) {
    
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHost() {
    return host;
  }


  public void setHost(String host) {
    this.host = host;
  }


  public V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet httpHeaders(List<V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGetHttpHeaders> httpHeaders) {
    
    this.httpHeaders = httpHeaders;
    return this;
  }

  public V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet addHttpHeadersItem(V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGetHttpHeaders httpHeadersItem) {
    if (this.httpHeaders == null) {
      this.httpHeaders = new ArrayList<>();
    }
    this.httpHeaders.add(httpHeadersItem);
    return this;
  }

   /**
   * Get httpHeaders
   * @return httpHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGetHttpHeaders> getHttpHeaders() {
    return httpHeaders;
  }


  public void setHttpHeaders(List<V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGetHttpHeaders> httpHeaders) {
    this.httpHeaders = httpHeaders;
  }


  public V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet port(Object port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @ApiModelProperty(required = true, value = "")

  public Object getPort() {
    return port;
  }


  public void setPort(Object port) {
    this.port = port;
  }


  public V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet scheme(String scheme) {
    
    this.scheme = scheme;
    return this;
  }

   /**
   * Get scheme
   * @return scheme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getScheme() {
    return scheme;
  }


  public void setScheme(String scheme) {
    this.scheme = scheme;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet v1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet = (V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet) o;
    return Objects.equals(this.host, v1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet.host) &&
        Objects.equals(this.httpHeaders, v1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet.httpHeaders) &&
        Objects.equals(this.path, v1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet.path) &&
        Objects.equals(this.port, v1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet.port) &&
        Objects.equals(this.scheme, v1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet.scheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, httpHeaders, path, port, scheme);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1beta2ScheduledSparkApplicationSpecTemplateDriverLifecyclePostStartHttpGet {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    httpHeaders: ").append(toIndentedString(httpHeaders)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

